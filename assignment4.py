# -*- coding: utf-8 -*-
"""assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQ3NaAFjZLF7FL67Aeo575XTV4Gh3CsH

Question 1.

Using the math library, create a Python program to calculate the side of a right triangle. Write three functions: 1. SOH, 2. CAH. 3. TOA.
"""

import math
# Calculation functions
#initial inputs the user is asked for
unknown_side = input("What side would you like to calculate?").lower().strip(' ')
angle = (float(input("Enter an angle of your choice: ").strip(' ')))  
angle_conv = input("Is your angle in radians? Y/N?").lower().strip(' ')
if angle_conv =="n":    
  angle= math.radians(angle)
while unknown_side == "o" or unknown_side =="opposite"or unknown_side =="h" or unknown_side=="hypotenuse" or unknown_side =="a" or unknown_side =="adjacent":

  #asks user for an angle, the side they know and the length, as well as the side they want to calculate to determine which trig function to execute 

  known_side = input("What side do you already know?").lower().strip(' ')
  if known_side == unknown_side:
    print("Invalid input for sides.")
    break
  side_length = float(input("Enter the length of your known side: "))

  #This function involves the Sine function to calculate the unknown side
  def SOH(angle,side_length):
    calc_side_1 = 0
    if unknown_side == "o" and known_side =="h":
      calc_side_1 = side_length*math.sin(angle)
    elif unknown_side == "h" and known_side =="o":
      calc_side_1 = side_length/math.sin(angle)

    return calc_side_1

    #This function involves the Cos function to calculate the unknown side
  
  def CAH(angle,side_length):
    calc_side_2 = 0
    if unknown_side =="a" and known_side== "h":
      calc_side_2 = side_length*math.cos(angle)
    elif unknown_side =="h" and known_side=="a":
      calc_side_2 = side_length*math.cos(angle)

    return calc_side_2
      
    #This function involves the Tan function to calculate the unknown side

  def TOA(angle,side_length):
    calc_side_3 = 0
    if unknown_side =="o" and known_side =="a":
      calc_side_3 = side_length*math.tan(angle)
    elif unknown_side =="a" and known_side=="o":
      calc_side_3 = side_length/math.tan(angle)

    return calc_side_3
  
      
  main()
  unknown_side = input("What side would you like to calculate?").lower().strip(' ')
  #user is prompted for inputs again before the next iteration
  if unknown_side == "0" or unknown_side == "exit":
    break
  elif unknown_side =="o" or unknown_side=="opposite"or unknown_side =="h" or unknown_side=="hypotenuse" or unknown_side =="a" or unknown_side =="adjacent":
    angle = (float(input("Enter an angle of your choice: ").strip(' ')))
    angle_conv = input("Is your angle in radians? Y/N?").lower().strip(' ')
    if angle_conv =="n":    
      angle= math.radians(angle)  
  else:
    print("Invalid input for unknown side.")
    break

# main() function
def main():
  SOH(angle,side_length)
  CAH(angle,side_length)
  TOA(angle,side_length)
  if unknown_side =="o":
    if known_side =="h":
      print("The opposite side is",SOH(angle,side_length))
    elif known_side =="a":
      print("The opposite side is",TOA(angle,side_length))
  elif unknown_side =="h":
    if known_side =="a":
      print("The hypotenuse is",CAH(angle,side_length))
    elif known_side =="o":
      print("The hypotenuse is",SOH(angle,side_length))
  elif unknown_side =="a":
    if known_side =="h":
      print("The adjacent side is",CAH(angle,side_length))
    elif known_side =="o":
      print("The asjacent side is",TOA(angle,side_length))

"""Question 2. Unit tests

Write your own unit tests as a function here.
"""

import unittest

class TestNotebook(unittest.TestCase):
    def test_SOH(self):
      self.assertEqual(SOH(30,15), 2.3137717483137608)
    def test_CAH(self):
      self.assertEqual(CAH(30,15), -14.820474361392927)
    def test_TOA(self):
      self.assertEqual(TOA(30,15), -96.07996794969414)
    # Write your own unit tests here as new functions
    def main_1(main):
      self.assertEqual(main(),-96.07996794969414)
    def main_2(self):
      self.assertEqual(main(),-14.820474361392927)
    def test_soh(self):
      self.assertEqual(SOH(60,20), -6.096212422044333)
    def test_cah(self):
      self.assertEqual(CAH(60,15),-14.286194706227345)
    
      
    



unittest.main(argv=[''], verbosity=2, exit=False)