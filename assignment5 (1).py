# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dHUHAteEUbsOTxQ2ye3wAuJFMdmEjihz

Question 1

Create a python program that takes an input string from a user. Analyze this string and separate all single letter words into one array, numbers into another array and all longer words into a third array.
"""

# Write your functions here
#Takes an input string and splits it into an array "String" of each of the separate words/characters in the string

import re 

#this is a mapping table of what punctuation to replace with white spaces

table = str.maketrans(".,?!_\/",7*" ")

#used stack overflow for help to create a function which replaces instances of contractions with the words they're supposed to be
#so that the right number of words can be outputted. This works well for the most part, but cannot differentiate I'd into "I would" or "I had"
#uses the regular expressions library to replace reoccurring expressions  or patterns
def contractions(sentence):
  sentence = re.sub(r"n\'t", " not", sentence)
  sentence = re.sub(r"\'re", " are", sentence)
  sentence = re.sub(r"\'s", " is", sentence)
  sentence = re.sub(r"\'d", " would", sentence)
  sentence = re.sub(r"\'ll", " will", sentence)
  sentence = re.sub(r"\'t", " not", sentence)
  sentence = re.sub(r"\'ve", " have", sentence)
  sentence = re.sub(r"\'m", " am", sentence)
  return sentence

#using the contractions function and mapping table, the punctuation is replaced with white spaces 
#and the string is split into separate elements at the white spaces
#also capitalizes words that should be capitalized 

string = contractions(((input('Input a string:').capitalize()).translate(table))).split()


#allows user to enter strings until they enter 0 or exit, to terminate the program

while True:

  #function to create an array of single letter words
  def findSingle(string):
    single_letter_words=[];
    for i in string:
      if len(i)==1 and i.isdigit()==False:
        single_letter_words.append(i)
        #print(single_letter_words)
    return single_letter_words


  #function to create an array of numbers
  def findNum(string):
    numbers=[];
    for i in string:
      if i.isdigit()==True:
        numbers.append(i)
    return numbers


  #function to create an array of longer words
  def findWord(string):
    words=[];
    for i in string:
      if len(i) >=2 and i.isdigit()==False:
        words.append(i)
    return words

  main()

  nextString= input("Enter another string if you would like to go again, or type '0' or 'Exit' to stop.").lower()

  #stops the next iteration if 0 or exit entered. Capitalizes words that should be capitalized.
  if nextString == "0" or nextString =="exit":
    break
  else:
    string = contractions(((nextString).capitalize()).translate(table)).split()

def main():
   print('Numbers:', findNum(string))
   print('Single letter words:',findSingle(string))
   print('Words:', findWord(string))

"""Question 2

Unit tests for functions. You can either group them by tuples or as results. Thus only one segment of the given unit tests will work for your case.
"""

import unittest

class TestNotebook(unittest.TestCase):
    # Output tuples to group results
    def test_num(self):
      self.assertEqual(findNum(['Hello', 'world', 'a', 'new', 'day','97']), (['97'], ['Hello', 'world', 'a', 'new', 'day']))
    def test_single(self):
      self.assertEqual(findSingle(['Hello', 'world', 'a', 'new', 'day','97']), (['a'], ['Hello', 'world', 'new', 'day', '97']))
    def test_word(self):
      self.assertEqual(findWord(['Hello', 'world', 'a', 'new', 'day','97']), (['Hello', 'world', 'new', 'day', '97'], ['a']))

    # Output just the result
    def test_num(self):
      self.assertEqual(findNum(['Hello', 'world', 'a', 'new', 'day','97']), (['97']))
    def test_single(self):
      self.assertEqual(findSingle(['Hello', 'world', 'a', 'new', 'day','97']), (['a']))
    def test_word(self):
      self.assertEqual(findWord(['Hello', 'world', 'a', 'new', 'day','97']), (['Hello', 'world', 'new', 'day']))

    # Add your unit tests here
    def test_num_1(self):
       self.assertEqual(findNum(["How", "many", "pizzas", "would", "you","like"]), ([]))
    def test_single_1(self):
      self.assertEqual(findSingle(["How", "many", "pizzas", "would", "you","like"]), ([]))
    def test_word_1(self):
      self.assertEqual(findWord(["How", "many", "pizzas", "would", "you","like"]), (["How", "many", "pizzas", "would", "you","like"]))

    def test_num_2(self):
       self.assertEqual(findNum(["I", "would", "like", "2", "cheese","pizzas"]), (["2"]))
    def test_single_2(self):
      self.assertEqual(findSingle(["I", "would", "like", "2", "cheese","pizzas"]), (["I"]))
    def test_word_2(self):
      self.assertEqual(findWord(["I", "would", "like", "2", "cheese","pizzas"]), (["would","like","cheese","pizzas"]))
  


unittest.main(argv=[''], verbosity=2, exit=False)